name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  CACHE_KEY: node-modules

jobs:
  # Quality Assurance Job
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run type check
      run: npm run type-check
      continue-on-error: true  # TypeScript might not be configured
      
    - name: Run tests
      run: npm run test
      
    - name: Run test coverage
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Audit Job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      if: github.event_name == 'pull_request'

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [qa, security]
    
    strategy:
      matrix:
        environment: [staging, production]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for ${{ matrix.environment }}
      run: npm run build:${{ matrix.environment }}
      env:
        # Add environment-specific variables here
        VITE_APP_ENVIRONMENT: ${{ matrix.environment }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.environment }}
        path: dist/
        retention-days: 30
        
    - name: Analyze bundle size
      run: |
        npm install -g bundlesize
        bundlesize
      continue-on-error: true

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-staging
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Examples:
        # - Deploy to Netlify: npx netlify-cli deploy --dir=dist --site=${{ secrets.NETLIFY_STAGING_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
        # - Deploy to Vercel: npx vercel --token=${{ secrets.VERCEL_TOKEN }} --prod
        # - Deploy to AWS S3: aws s3 sync dist/ s3://${{ secrets.S3_STAGING_BUCKET }} --delete
        # - Deploy to Azure: az webapp deployment source config-zip --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.AZURE_STAGING_APP }} --src dist.zip
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests here
        # npm run test:smoke:staging
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Staging deployment ${{ job.status }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-production
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Examples:
        # - Deploy to Netlify: npx netlify-cli deploy --dir=dist --site=${{ secrets.NETLIFY_PRODUCTION_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --prod
        # - Deploy to Vercel: npx vercel --token=${{ secrets.VERCEL_TOKEN }} --prod
        # - Deploy to AWS S3: aws s3 sync dist/ s3://${{ secrets.S3_PRODUCTION_BUCKET }} --delete
        # - Deploy to Azure: az webapp deployment source config-zip --resource-group ${{ secrets.AZURE_RG }} --name ${{ secrets.AZURE_PRODUCTION_APP }} --src dist.zip
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production..."
        # Add smoke tests here
        # npm run test:smoke:production
        
    - name: Create deployment record
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment via GitHub Actions'
          });
          
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Production deployment ${{ job.status }} ðŸš€'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Run WebPageTest
      uses: WPO-Foundation/webpagetest-github-action@v1
      with:
        apikey: ${{ secrets.WEBPAGETEST_API_KEY }}
        urls: |
          https://staging.your-domain.com
        settings: |
          {
            "location": "Dulles:Chrome",
            "connectivity": "3G",
            "runs": 3
          }

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.10.0
      with:
        target: 'https://staging.your-domain.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const oldArtifacts = artifacts.data.artifacts
            .filter(artifact => {
              const ageInDays = (Date.now() - new Date(artifact.created_at)) / (1000 * 60 * 60 * 24);
              return ageInDays > 30;
            });
            
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
            });
          }